<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom"><id>https://github.com/hadleysu/gitblog</id><title>RSS feed of hadleysu's gitblog</title><updated>2023-09-15T08:37:31.218239+00:00</updated><author><name>hadleysu</name><email>hadley.susu@gmail.com</email></author><link href="https://github.com/hadleysu/gitblog"/><link href="https://raw.githubusercontent.com/hadleysu/gitblog/main/feed.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator><entry><id>https://github.com/hadleysu/gitblog/issues/4</id><title>python编程从入门到实践笔记</title><updated>2023-09-15T08:37:31.659691+00:00</updated><content type="html"><![CDATA[<h1>python编程从入门到实践笔记<!-- omit in toc --></h1>
<ul>
<li><a href="#is-python-interpreted-or-compiled-yes">Is Python interpreted or compiled? Yes.</a></li>
<li>
<a href="#2-%E5%8F%98%E9%87%8F%E5%92%8C%E7%AE%80%E5%8D%95%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">2 变量和简单的数据类型</a><ul>
<li><a href="#%E5%8F%98%E9%87%8F">变量</a></li>
<li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2">字符串</a></li>
<li><a href="#%E6%95%B0">数</a></li>
<li><a href="#%E6%B3%A8%E9%87%8A">注释</a></li>
</ul>
</li>
<li>
<a href="#3-%E5%88%97%E8%A1%A8%E7%AE%80%E4%BB%8B">3 列表简介</a><ul>
<li><a href="#%E5%88%97%E8%A1%A8">列表</a></li>
<li><a href="#%E7%AE%A1%E7%90%86%E5%88%97%E8%A1%A8--sortsortedlen-">管理列表 [ sort(),sorted(),len() ]</a></li>
<li><a href="#%E4%BD%BF%E5%88%97%E8%A1%A8%E6%97%B6%E9%81%BF%E5%85%8D%E7%B4%A2%E5%BC%95%E9%94%99%E8%AF%AF">使⽤列表时避免索引错误</a></li>
</ul>
</li>
<li>
<a href="#4-%E6%93%8D%E4%BD%9C%E5%88%97%E8%A1%A8">4 操作列表</a><ul>
<li><a href="#%E9%81%8D%E5%8E%86%E6%95%B4%E4%B8%AA%E5%88%97%E8%A1%A8">遍历整个列表</a></li>
<li><a href="#%E9%81%BF%E5%85%8D%E7%BC%A9%E8%BF%9B%E9%94%99%E8%AF%AF">避免缩进错误</a></li>
<li><a href="#%E5%88%9B%E5%BB%BA%E6%95%B0%E5%80%BC%E5%88%97%E8%A1%A8">创建数值列表</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E5%88%97%E8%A1%A8%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86">使用列表的一部分</a></li>
<li><a href="#%E5%85%83%E7%BB%84">元组</a></li>
<li><a href="#%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F">设置代码格式</a></li>
</ul>
</li>
</ul>
<h2><a href="https://nedbatchelder.com/blog/201803/is_python_interpreted_or_compiled_yes.html">Is Python interpreted or compiled? Yes.</a></h2>
<h2>2 变量和简单的数据类型</h2>
<h3>变量</h3>
<ul>
<li>
变量(variable)：变量是可以被赋值的标签，也可以说变量指向特定的值(value)。<ul>
<li>变量的命名：变量名只能包含字⺟、数字和下划线 。变量名能以字⺟或下划线打头，但不能以数字打头。变量名不能包含空格，但能使⽤下划线来分隔其中的单词。</li>
<li>注意：应使⽤⼩写的 Python 变量名。全大写定义常量。</li>
</ul>
</li>
</ul>
<h3>字符串</h3>
<ul>
<li>
字符串(string)：。在 Python 中，⽤引号引起的都是字符串，其中的引号可以是单引号，也可以是双引号.<ul>
<li>
<p>使⽤⽅法修改字符串的⼤⼩写:</p>
<pre><code class="language-python">name = &quot;ada lovelace&quot;
print(name.title()) # title() ⽅法以⾸字⺟⼤写的⽅式显⽰每个单词
name = &quot;Ada Lovelace&quot;
print(name.upper()) # upper() 方法以全大写显示字符串
print(name.lower()) # lower() 方法以全小写显示字符串
</code></pre>
</li>
<li>
<p>f 字符串：将要插⼊的变量放在花括号内</p>
<pre><code class="language-python">first_name = &quot;ada&quot;
last_name = &quot;lovelace&quot;
full_name = f&quot;{first_name} {last_name}&quot;
print(full_name)
print(f&quot;Hello, {full_name.title()}!&quot;)
# 这种字符串称为 f 字符串。f 是 format（设置格式）的简写，因为 Python 通过把花括号内的变量替换为其值来设置字符串的格式。
</code></pre>
</li>
<li>
<p>使⽤制表符或换⾏符来添加空⽩</p>
<pre><code class="language-python"># 制表符 \t ; 换行符 \n ;
&gt;&gt;&gt; print(&quot;Languages:\n\tPython\n\tC\n\tJavaScript&quot;)
Languages:
    Python
    C
    JavaScript
</code></pre>
</li>
<li>
<p>删除空⽩</p>
<pre><code class="language-python"># rstrip() lstrip() strip()分别为删除字符串右端的空⽩、删除字符串左端的空⽩、同时删除字符串两端的空⽩
&gt;&gt;&gt; favorite_language = &#x27; python &#x27;
&gt;&gt;&gt; favorite_language.rstrip()
&#x27; python&#x27;
&gt;&gt;&gt; favorite_language.lstrip()
&#x27;python &#x27;
&gt;&gt;&gt; favorite_language.strip()
&#x27;python&#x27;
</code></pre>
</li>
<li>
<p>删除前缀</p>
<pre><code class="language-python"># removeprefix() ⽅法
&gt;&gt;&gt; nostarch_url = &#x27;https://nostarch.com&#x27;
&gt;&gt;&gt; nostarch_url.removeprefix(&#x27;https://&#x27;)
&#x27;nostarch.com&#x27;
# 如果想保留删除前缀后的值，既可将其重新赋给原来的变量，也可将其赋给另⼀个变量
&gt;&gt;&gt; simple_url = nostarch_url.removeprefix(&#x27;https://&#x27;)
</code></pre>
</li>
</ul>
</li>
</ul>
<h3>数</h3>
<ul>
<li>
<p>整数(integer)</p>
<pre><code class="language-python"># Python 使⽤两个乘号（**）表⽰乘⽅运算
&gt;&gt;&gt; 3 ** 2
9
</code></pre>
</li>
<li>
<p>浮点数(float)</p>
<pre><code class="language-python"># 将任意两个数相除，结果总是浮点数，即便这两个数都是整数且能整除：
&gt;&gt;&gt; 4/2
2.0
# 在 Python 中，⽆论是哪种运算，只要有操作数是浮点数，默认得到的就总是浮点数，即便结果原本为整数。
&gt;&gt;&gt; 1 + 2.0
3.0
&gt;&gt;&gt; 2 * 3.0
6.0
&gt;&gt;&gt; 3.0 ** 2
9.0
</code></pre>
</li>
<li>
<p>数中的下划线</p>
<pre><code class="language-python"># 为在存储这种数时，Python 会忽略其中的下划线。在对数字位分组时，即便不是将每三位分成⼀组，也不会影响最终的值。
&gt;&gt;&gt; universe_age = 14_000_000_000
&gt;&gt;&gt; print(universe_age)
14000000000
# 这种表⽰法既适⽤于整数，也适⽤于浮点数。
</code></pre>
</li>
<li>
<p>常数(constant)：是在程序的整个⽣命周期内都保持不变的变量。其变量名全⼤写。</p>
<pre><code class="language-python">MAX_CONNECTIONS = 5000
</code></pre>
</li>
</ul>
<h3>注释</h3>
<ul>
<li>注释(comment)：注释⽤井号（#）标识。批量注释CTRL + /</li>
</ul>
<h2>3 列表简介</h2>
<h3>列表</h3>
<ul>
<li>
<p>列表(list)：由⼀系列按特定顺序排列的元素组成。在 Python 中，⽤⽅括号（[]）表⽰列表，⽤逗号分隔其中的元素。</p>
<ul>
<li>
<p>Python 为访问最后⼀个列表元素提供了⼀种特殊语法。通过将索引指定为-1，可让 Python 返回最后⼀个列表元素。</p>
<pre><code class="language-python">bicycles = [&#x27;trek&#x27;, &#x27;cannondale&#x27;, &#x27;redline&#x27;, &#x27;specialized&#x27;]
print(bicycles[-1])
# 这些代码返回 &#x27;specialized&#x27;。
</code></pre>
</li>
<li>
<p>这种语法很有⽤，因为你经常需要在不知道列表⻓度的情况下访问最后的元素。这种约定也适⽤于其他负数索引，例如，索引 -2 返回倒数第⼆个列表元素，索引 -3 返回倒数第三个列表元素，依此类推。</p>
</li>
</ul>
</li>
<li>
<p>修改、添加和删除元素</p>
<ul>
<li>
<p>修改列表元素</p>
<pre><code class="language-python">motorcycles = [&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]
print(motorcycles)
motorcycles[0] = &#x27;ducati&#x27;
print(motorcycles)
</code></pre>
</li>
<li>
<p>在列表中添加元素</p>
<ul>
<li>
<p>在列表末尾添加元素</p>
<pre><code class="language-python"># 在列表中添加新元素时，最简单的⽅式是将元素追加（append）到列表末尾。
motorcycles = [&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]
print(motorcycles)
motorcycles.append(&#x27;ducati&#x27;)
print(motorcycles)
# append() ⽅法让动态地创建列表易如反掌。例如，你可以先创建⼀个空列表，再使⽤⼀系列函数调⽤ append() 添加元素。
motorcycles = []
motorcycles.append(&#x27;honda&#x27;)
motorcycles.append(&#x27;yamaha&#x27;)
motorcycles.append(&#x27;suzuki&#x27;)
print(motorcycles)
</code></pre>
</li>
<li>
<p>在列表中插⼊元素</p>
<pre><code class="language-python"># 使⽤ insert() ⽅法可在列表的任意位置添加新元素。
motorcycles = [&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]
motorcycles.insert(0, &#x27;ducati&#x27;)
print(motorcycles)
#这种操作将列表中的每个既有元素都右移⼀个位置。
[&#x27;ducati&#x27;, &#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]
</code></pre>
</li>
</ul>
</li>
<li>
<p>从列表中删除元素</p>
<ul>
<li>
<p>使⽤ del 语句删除元素</p>
<pre><code class="language-python">#如果知道要删除的元素在列表中的位置，可使⽤ del 语句
#使⽤ del 可删除任意位置的列表元素，只需要知道其索引即可。
motorcycles = [&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]
print(motorcycles)
del motorcycles[1]
print(motorcycles)
</code></pre>
</li>
<li>
<p>使⽤ pop() ⽅法删除元素</p>
<pre><code class="language-python"># pop() ⽅法删除列表末尾的元素，并让你能够接着使⽤它。每当你使⽤ pop() 时，被弹出的元素就不再在列表中了。
motorcycles = [&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]
print(motorcycles)
popped_motorcycle = motorcycles.pop()
print(motorcycles)
print(popped_motorcycle)
# 输出表明，列表末尾的值 &#x27;suzuki&#x27; 已删除，它现在被赋给了变量popped_motorcycle
[&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]
[&#x27;honda&#x27;, &#x27;yamaha&#x27;]
suzuki
</code></pre>
</li>
<li>
<p>删除列表中任意位置的元素</p>
<pre><code class="language-python"># 也可以使⽤ pop() 删除列表中任意位置的元素，只需要在括号中指定要删除的元素的索引即可。
motorcycles = [&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]
first_owned = motorcycles.pop(0)
print(f&quot;The first motorcycle I owned was a {first_owned.title()}.&quot;)
# ⾸先弹出列表中的第⼀款摩托⻋，然后打印⼀条有关这辆摩托⻋的消息。
The first motorcycle I owned was a Honda.
# 如果不确定该使⽤ del 语句还是 pop() ⽅法，下⾯是⼀个简单的判断标准：如果要从列表中删除⼀个元素，且不再以任何⽅式使⽤它，就使⽤ del 语句；如果要在删除元素后继续使⽤它，就使⽤ pop() ⽅法。
</code></pre>
</li>
<li>
<p>根据值删除元素</p>
<pre><code class="language-python"># 有时候，你不知道要从列表中删除的值在哪个位置。如果只知道要删除的元素的值，可使⽤ remove() ⽅法。
motorcycles = [&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;, &#x27;ducati&#x27;]
print(motorcycles)
motorcycles.remove(&#x27;ducati&#x27;)
print(motorcycles)
# remove() ⽅法让 Python 确定 &#x27;ducati&#x27; 出现在列表的什么地⽅，并将该元素删除：
[&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;, &#x27;ducati&#x27;]
[&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]
# 注意：remove() ⽅法只删除第⼀个指定的值。如果要删除的值可能在列表中出现多次，就需要使⽤循环，确保将每个值都删除。这将在第 7 章介绍。
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3>管理列表 [ sort(),sorted(),len() ]</h3>
<ul>
<li>
<p>使⽤ sort() ⽅法对列表进⾏永久排序</p>
<pre><code class="language-python">cars = [&#x27;bmw&#x27;, &#x27;audi&#x27;, &#x27;toyota&#x27;, &#x27;subaru&#x27;]
cars.sort()
print(cars)
# sort() ⽅法能永久地修改列表元素的排列顺序。现在，汽⻋是按字⺟顺序排列的，再也⽆法恢复到原来的排列顺序：
[&#x27;audi&#x27;, &#x27;bmw&#x27;, &#x27;subaru&#x27;, &#x27;toyota&#x27;]
# 还可以按与字⺟顺序相反的顺序排列列表元素，只需向 sort() ⽅法传递参数 reverse=True 即可。下⾯的⽰例将汽⻋列表按与字⺟顺序相反的顺序排列：
cars.sort(reverse=True)
# 同样，对列表元素排列顺序的修改也是永久的：
[&#x27;toyota&#x27;, &#x27;subaru&#x27;, &#x27;bmw&#x27;, &#x27;audi&#x27;]
</code></pre>
</li>
<li>
<p>使⽤ sorted() 函数对列表进⾏临时排序</p>
<pre><code class="language-python"># 要保留列表元素原来的排列顺序，并以特定的顺序呈现它们，可使⽤sorted() 函数。
cars = [&#x27;bmw&#x27;, &#x27;audi&#x27;, &#x27;toyota&#x27;, &#x27;subaru&#x27;]
❶ print(&quot;Here is the original list:&quot;)
print(cars)
❷ print(&quot;\nHere is the sorted list:&quot;)
print(sorted(cars))
❸ print(&quot;\nHere is the original list again:&quot;)
print(cars)
# 注意，在调⽤ sorted() 函数后，列表元素的排列顺序并没有变:
Here is the original list:
[&#x27;bmw&#x27;, &#x27;audi&#x27;, &#x27;toyota&#x27;, &#x27;subaru&#x27;]
Here is the sorted list:
[&#x27;audi&#x27;, &#x27;bmw&#x27;, &#x27;subaru&#x27;, &#x27;toyota&#x27;]
Here is the original list again:
[&#x27;bmw&#x27;, &#x27;audi&#x27;, &#x27;toyota&#x27;, &#x27;subaru&#x27;]
# 如果要按与字⺟顺序相反的顺序显⽰列表，也可向 sorted() 函数传递参数 reverse=True。
# 注意：在并⾮所有的值都是全⼩写的时，按字⺟顺序排列列表要复杂⼀些。在确定排列顺序时，有多种解读⼤写字⺟的⽅式，此时要指定准确的排列顺序，可能会⽐这⾥所做的更加复杂。然⽽，⼤多数排序⽅式是以本节介绍的知识为基础的。
</code></pre>
</li>
<li>
<p>反向打印列表</p>
<pre><code class="language-python"># 要反转列表元素的排列顺序，可使⽤ reverse() ⽅法。
cars = [&#x27;bmw&#x27;, &#x27;audi&#x27;, &#x27;toyota&#x27;, &#x27;subaru&#x27;]
print(cars)
cars.reverse()
print(cars)
#请注意，reverse() 不是按与字⺟顺序相反的顺序排列列表元素，只是反转列表元素的排列顺序：
[&#x27;bmw&#x27;, &#x27;audi&#x27;, &#x27;toyota&#x27;, &#x27;subaru&#x27;]
[&#x27;subaru&#x27;, &#x27;toyota&#x27;, &#x27;audi&#x27;, &#x27;bmw&#x27;]
# reverse() ⽅法会永久地修改列表元素的排列顺序，但可随时恢复到原来的排列顺序，只需对列表再次调⽤ reverse() 即可。
</code></pre>
</li>
<li>
<p>确定列表的⻓度</p>
<pre><code class="language-python"># 使⽤ len() 函数可快速获悉列表的⻓度。
&gt;&gt;&gt; cars = [&#x27;bmw&#x27;, &#x27;audi&#x27;, &#x27;toyota&#x27;, &#x27;subaru&#x27;]
&gt;&gt;&gt; len(cars)
4
# 注意：Python 在计算列表元素数时从 1 开始，因此你在确定列表⻓度时应该不会遇到差⼀错误。
</code></pre>
</li>
</ul>
<h3>使⽤列表时避免索引错误</h3>
<pre><code class="language-python"># 仅当列表为空时，这种访问最后⼀个元素的⽅式才会导致错误：
motorcycles = []
print(motorcycles[-1])
# 列表 motorcycles 不包含任何元素，因此 Python 返回⼀条索引错误消息：
Traceback (most recent call last):
  File &quot;motorcyles.py&quot;, line 3, in &lt;module&gt;
    print(motorcycles[-1])
          ~~~~~~~~~~~^^^^
IndexError: list index out of range
# 注意：在发⽣索引错误却找不到解决办法时，请尝试将列表或其⻓度打印出来。列表可能与你以为的截然不同，在程序对其进⾏了动态处理时尤其如此。查看列表或其包含的元素数，可帮助你排查这种逻辑错误。
</code></pre>
<h2>4 操作列表</h2>
<h3>遍历整个列表</h3>
<h3>避免缩进错误</h3>
<h3>创建数值列表</h3>
<h3>使用列表的一部分</h3>
<h3>元组</h3>
<h3>设置代码格式</h3>
]]></content><link href="https://github.com/hadleysu/gitblog/issues/4" rel="alternate"/><category term="技术相关"/><published>2023-09-14T08:20:32+00:00</published></entry><entry><id>https://github.com/hadleysu/gitblog/issues/3</id><title>Markdown相关</title><updated>2023-09-15T08:37:31.853185+00:00</updated><content type="html"><![CDATA[<p>资料：</p>
<ul>
<li><a href="https://github.com/google/styleguide/blob/gh-pages/docguide/style.md">Google Markdown  Style Guide</a></li>
<li><a href="https://cirosantilli.com/markdown-style-guide/">Markdown  Style Guide</a></li>
</ul>
]]></content><link href="https://github.com/hadleysu/gitblog/issues/3" rel="alternate"/><category term="技术相关"/><published>2023-09-12T13:49:32+00:00</published></entry><entry><id>https://github.com/hadleysu/gitblog/issues/2</id><title>感谢yihong老师的gitblog项目</title><updated>2023-09-15T08:37:32.032313+00:00</updated><content type="html"><![CDATA[<p>感谢yihong老师的gitblog项目，我可以开启我的写issue博客之旅了。</p>
<p><a href="https://github.com/yihong0618/gitblog">yihong老师的gitblog项目</a>
<a href="https://github.com/yihong0618/gitblog/issues/177">这个博客开源了</a></p>
]]></content><link href="https://github.com/hadleysu/gitblog/issues/2" rel="alternate"/><category term="一些记录"/><published>2023-09-10T13:21:29+00:00</published></entry></feed>